//

@use "sass:list";
@use "../abstract/variables" as var;

@each $name, $pos in var.$positions {
  .text-#{$name} {
    text-align: $pos;
  }
}

@for $i from 1 through 3 {
  .text-#{list.nth(var.$types, $i)} {
    text-transform: list.nth(var.$types, $i);
  }
}

/*


LISTS Function

$list: val val val;
$list: val, val, val;
$list: [val, val, val]

length(list)
nth(list, index)
set-nth(list, index, newVal)
join(list1,list2)
join(list1,list2, space) comma
append(list, newVal)
zip(list1, list2) pair list1 and list2 same index vals
index(lsit, val) return index number



*/

// SPACE SYSTEM in Pixel -  2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128

$spaces: 2, 4, 8, 12, 16, 24, 32, 48, 64, 80, 96, 128;

@for $i from 1 through list.length($spaces) {
  /* Margin Top */

  .mt-#{list.nth($spaces, $i)} {
    margin-top: #{list.nth($spaces, $i)}px;
  }

  /* Margin Right */

  .mr-#{list.nth($spaces, $i)} {
    margin-right: #{list.nth($spaces, $i)}px;
  }

  /* Margin Bottom */

  .mb-#{list.nth($spaces, $i)} {
    margin-bottom: #{list.nth($spaces, $i)}px;
  }

  /* Margin Left */

  .ml-#{list.nth($spaces, $i)} {
    margin-left: #{list.nth($spaces, $i)}px;
  }

  /* Margin Horizontal */

  .mx-#{list.nth($spaces, $i)} {
    margin-inline: #{list.nth($spaces, $i)}px;
  }

  /* Margin Vertical */

  .my-#{list.nth($spaces, $i)} {
    margin: #{list.nth($spaces, $i)}px 0;
  }
}

.mt-4 {
  margin-top: 4.5rem;
}

.mb-3 {
  margin-bottom: 2.4rem;
}

.px-3 {
  padding-inline: 3rem;
}

.py-2 {
  padding-top: 2rem;
  padding-bottom: 2rem;
}
